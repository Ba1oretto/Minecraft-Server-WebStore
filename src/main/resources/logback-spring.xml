<?xml version="1.0" encoding="UTF-8"?>
<!--<configuration>-->
    <!--<statusListener class=""/>-->

    <!--<contextName>SpringBootLogbacK</contextName>-->
    <!--<property name="LOG_PATH" value="./" />-->
    <!--&lt;!&ndash;-->
    <!--	<property name="LOG_PATH" value="D:\\JavaWebLogs" />-->
    <!--	<property name="APPDIR" value="SpringBootDemo" />-->
    <!-- &ndash;&gt;-->
    <!--&lt;!&ndash;设置系统日志目录&ndash;&gt;-->
    <!--<property name="APPDIR" value="log" />-->

    <!--&lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
    <!--    <file>${LOG_PATH}/${APPDIR}/log_error.log</file>-->
    <!--    &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        &lt;!&ndash; 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
    <!--        	而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
    <!--        <fileNamePattern>${LOG_PATH}/${APPDIR}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
    <!--        &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始， 命名日志文件，例如log-error-2017-09-21.0.log &ndash;&gt;-->
    <!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--            <maxFileSize>10MB</maxFileSize>-->
    <!--        </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--    </rollingPolicy>-->
    <!--    &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
    <!--    <append>true</append>-->
    <!--    &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
    <!--    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--        <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger Line:%-3L - %msg%n</pattern>-->
    <!--        <charset>utf-8</charset>-->
    <!--    </encoder>-->
    <!--    &lt;!&ndash; 此日志文件只记录info级别的 &ndash;&gt;-->
    <!--    <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
    <!--        <level>error</level>-->
    <!--        <onMatch>ACCEPT</onMatch>-->
    <!--        <onMismatch>DENY</onMismatch>-->
    <!--    </filter>-->
    <!--</appender>-->

    <!--&lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
    <!--    <file>${LOG_PATH}/${APPDIR}/log_debug.log</file>-->
    <!--    &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        &lt;!&ndash; 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
    <!--       		 而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
    <!--        <fileNamePattern>${LOG_PATH}/${APPDIR}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
    <!--        &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，命名日志文件，例如log-error-2017-09-21.0.log &ndash;&gt;-->
    <!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--            <maxFileSize>10MB</maxFileSize>-->
    <!--        </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--    </rollingPolicy>-->
    <!--    &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
    <!--    <append>true</append>-->
    <!--    &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
    <!--    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--        <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger Line:%-3L - %msg%n</pattern>-->
    <!--        <charset>utf-8</charset>-->
    <!--    </encoder>-->
    <!--    &lt;!&ndash; 此日志文件只记录debug级别的 &ndash;&gt;-->
    <!--    <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
    <!--        <level>debug</level>-->
    <!--        <onMatch>ACCEPT</onMatch>-->
    <!--        <onMismatch>DENY</onMismatch>-->
    <!--    </filter>-->
    <!--</appender>-->

    <!--&lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
    <!--    <file>${LOG_PATH}/${APPDIR}/log_info.log</file>-->
    <!--    &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        &lt;!&ndash; 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
    <!--        			而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
    <!--        <fileNamePattern>${LOG_PATH}/${APPDIR}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
    <!--        &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，  命名日志文件，例如log-error-2017-09-21.0.log &ndash;&gt;-->
    <!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--            <maxFileSize>10MB</maxFileSize>-->
    <!--        </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--    </rollingPolicy>-->
    <!--    &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
    <!--    <append>true</append>-->
    <!--    &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
    <!--    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--        <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger Line:%-3L - %msg%n</pattern>-->
    <!--        <charset>utf-8</charset>-->
    <!--    </encoder>-->
    <!--    &lt;!&ndash; 此日志文件只记录info级别的 &ndash;&gt;-->
    <!--    <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
    <!--        <level>info</level>-->
    <!--        <onMatch>ACCEPT</onMatch>-->
    <!--        <onMismatch>DENY</onMismatch>-->
    <!--    </filter>-->
    <!--</appender>-->

    <!--&lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="MYBATIS" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--    &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
    <!--    <file>${LOG_PATH}/${APPDIR}/log_mybatis.log</file>-->
    <!--    &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
    <!--    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--        &lt;!&ndash; 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
    <!--        			而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
    <!--        <fileNamePattern>${LOG_PATH}/${APPDIR}/mybatis/log-mybatis-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
    <!--        &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，  命名日志文件，例如log-mybatis-2017-09-21.0.log &ndash;&gt;-->
    <!--        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--            <maxFileSize>10MB</maxFileSize>-->
    <!--        </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--    </rollingPolicy>-->
    <!--    &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
    <!--    <append>true</append>-->
    <!--    &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
    <!--    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--        <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger Line:%-3L - %msg%n</pattern>-->
    <!--        <charset>utf-8</charset>-->
    <!--    </encoder>-->
    <!--    &lt;!&ndash; 此日志文件只记录debug级别的 &ndash;&gt;-->
    <!--    <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
    <!--        &lt;!&ndash;   <level>trace</level> &ndash;&gt;-->
    <!--        <onMatch>ACCEPT</onMatch>-->
    <!--        <onMismatch>DENY</onMismatch>-->
    <!--    </filter>-->
    <!--</appender>-->

    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
    <!--    &lt;!&ndash;encoder 默认配置为PatternLayoutEncoder&ndash;&gt;-->
    <!--    <encoder>-->
    <!--        <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger Line:%-3L - %msg%n</pattern>-->
    <!--        <charset>utf-8</charset>-->
    <!--    </encoder>-->
    <!--    &lt;!&ndash;此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息&ndash;&gt;-->
    <!--    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
    <!--        <level>debug</level>-->
    <!--    </filter>-->
    <!--</appender>-->


    <!--&lt;!&ndash; 为单独的包配置日志级别，若root的级别大于此级别， 此处级别也会输出   应用场景：生产环境一般不会将日志级别设置为trace或debug，但是为详细的记录SQL语句的情况， 可将mybatis的级别设置为debug &ndash;&gt;-->
    <!--&lt;!&ndash; 配置mybatis打印SQL日志，按包所在目录配置 &ndash;&gt;-->
    <!--<logger name="com.it.test.mapper" level="debug" additivity="true">-->
    <!--    <appender-ref ref="MYBATIS" />-->
    <!--</logger>-->

    <!--<logger name="com.it.testWeb.mapper" level="trace" additivity="false">-->
    <!--    <appender-ref ref="MYBATIS"/>-->
    <!--</logger>-->


    <!--&lt;!&ndash; 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 &ndash;&gt;-->
    <!--<logger name="com.it" level="debug" additivity="false">-->
    <!--    <appender-ref ref="ERROR" />-->
    <!--    <appender-ref ref="DEBUG" />-->
    <!--    <appender-ref ref="INFO" />-->
    <!--    &lt;!&ndash; 生产环境将请 stdout 去掉 &ndash;&gt;-->
    <!--    <appender-ref ref="STDOUT" />-->
    <!--</logger>-->
    <!--<root level="DEBUG">-->
    <!--    &lt;!&ndash; 生产环境将请 stdout 去掉 &ndash;&gt;-->
    <!--    <appender-ref ref="STDOUT" />-->
    <!--</root>-->
<!--</configuration>-->






<!--<?xml version="1.0" encoding="UTF-8"?>-->

<configuration>

    <!-- 日志文件主目录 -->
    <define name="LOG_HOME" class="com.homeward.webstore.config.LogDirConfig"/>

    <!-- 默认配置 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- 配置控制台(Console) -->
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!-- 配置日志文件(File) -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 设置策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">

            <!-- 日志文件路径：这里%d{yyyyMMdd}表示按天分类日志 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/%i.log</FileNamePattern>

            <!-- 启用日志清理 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>

            <!-- 日志保留天数 -->
            <maxHistory>1</maxHistory>

            <!-- 日志文件最大的大小 -->
            <maxFileSize>10MB</maxFileSize>

        </rollingPolicy>
        <!-- 设置格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">

            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>

            <!-- 或者使用默认配置 -->
            <!-- <pattern>${FILE_LOG_PATTERN}</pattern> -->

            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- root节点 全局日志级别，用来指定最基础的日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>